---
- name: Compile backend locally
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    repo_url: https://github.com/zietzm/webgwas-backend.git
    repo_dest: webgwas-backend
    binary_dest: webgwas_backend
  tasks:
    - name: Clone or update the webgwas-backend repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        depth: 1
      register: git_repo
    - name: Check if the binary exists
      stat:
        path: "{{ binary_dest }}"
      register: binary_stat
    - name: Compile the backend if there are changes or binary is missing
      shell: |
        cargo zigbuild --release --target aarch64-unknown-linux-gnu
        mv target/aarch64-unknown-linux-gnu/release/webgwas-backend ../{{ binary_dest }}
      args:
        chdir: "{{ repo_dest }}"
      environment:
        TARGET_CC: aarch64-unknown-linux-gnu-gcc
        TARGET_FC: aarch64-unknown-linux-gnu-gfortran
        TARGET_AR: aarch64-unknown-linux-gnu-ar
        TARGET_RANLIB: aarch64-unknown-linux-gnu-ranlib
        BLIS_CONFNAME: cortexa57
      when: git_repo.changed or not binary_stat.stat.exists


- name: Build and deploy frontend
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    repo_url: https://github.com/zietzm/webgwas-frontend.git
    repo_dest: webgwas-frontend
    temp_build_dir: webgwas-frontend-build
    build_output_dir: out
    gh_pages_branch: gh-pages
    gh_pages_dest: gh-pages-temp
  tasks:
    - name: Ensure previous temporary build directory is removed
      file:
        path: "{{ temp_build_dir }}"
        state: absent
    - name: Create temporary build directory
      file:
        path: "{{ temp_build_dir }}"
        state: directory
    - name: Clone the webgwas-frontend repository into temporary directory
      git:
        repo: "{{ repo_url }}"
        dest: "{{ temp_build_dir }}/{{ repo_dest }}"
        version: main
        depth: 1
      register: git_repo
    - name: Clone the gh-pages branch into temporary directory
      git:
        repo: "{{ repo_url }}"
        dest: "{{ temp_build_dir }}/{{ gh_pages_dest }}"
        version: "{{ gh_pages_branch }}"
        depth: 1
    - name: Clean the gh-pages branch directory
      shell: |
        rm -rf *
      args:
        chdir: "{{ temp_build_dir }}/{{ gh_pages_dest }}"
        executable: /bin/bash
    - name: Build the frontend
      shell: |
        bun install
        bun run next build
      args:
        chdir: "{{ temp_build_dir }}/{{ repo_dest }}"
      when: git_repo.changed
    - name: Move build output to gh-pages directory
      shell: |
        mv {{ repo_dest }}/{{ build_output_dir }}/* {{ gh_pages_dest }}/
      args:
        chdir: "{{ temp_build_dir }}"
        executable: /bin/bash
    - name: Commit and push changes to gh-pages branch
      shell: |
        git add -A
        if ! git diff-index --quiet HEAD; then
          git commit -m "Deploy to gh-pages branch"
          git push origin "{{ gh_pages_branch }}"
        else
          echo "No changes to commit"
        fi
      args:
        chdir: "{{ temp_build_dir }}/{{ gh_pages_dest }}"
        executable: /bin/bash
    - name: Clean up temporary build directory
      file:
        path: "{{ temp_build_dir }}"
        state: absent

- name: Deploy WebGWAS
  hosts: webgwas
  become: yes
  vars:
    nginx_conf_path: "/etc/nginx/conf.d/webgwas.conf"
    nginx_basic_conf_file: "nginx-basic.conf"
    nginx_conf_file: "nginx.conf"
  tasks:
    - name: Update and upgrade packages
      dnf:
        update_cache: yes
        name: '*'
        state: latest
    
    - name: Install required packages
      dnf:
        name:
          - nginx
          - perl-FindBin
          - perl-core
          - tmux
          - htop
          - sqlite.aarch64
        state: present

    - name: Copy Nginx config file
      template:
        src: "{{ nginx_basic_conf_file }}.j2"
        dest: "{{ nginx_conf_path }}"
        owner: root
        group: root
        mode: '0644'
      notify: Reload Nginx

    - name: Ensure default Nginx config is removed
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify: Reload Nginx

    - name: Ensure Nginx is started and enabled
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Obtain and install SSL certificate
      shell: 
        uvx --with certbot --with certbot-nginx certbot --nginx -d api.webgwas.org -d www.api.webgwas.org --non-interactive --agree-tos --email michael.zietz@gmail.com
      args:
        executable: /bin/bash
        creates: /etc/letsencrypt/live/api.webgwas.org/fullchain.pem

    - name: Ensure Certbot renew timer is enabled
      shell: |
        echo "0 0,12 * * * root /opt/certbot/bin/python -c 'import random; import time; time.sleep(random.random() * 3600)' && sudo certbot renew -q" | sudo tee -a /etc/crontab > /dev/null

    - name: Copy full Nginx config file
      template:
        src: "{{ nginx_conf_file }}.j2"
        dest: "{{ nginx_conf_path }}"
        owner: root
        group: root
        mode: '0644'
      notify: Reload Nginx

    - name: Sync data from S3 to EC2
      shell: |
        aws s3 sync s3://webgwas/prod_data /home/ec2-user/prod_data --delete
        aws s3 cp s3://webgwas/backend.db /home/ec2-user/backend.db

    - name: copy backend binary
      copy:
        src: webgwas_backend
        dest: /home/ec2-user/webgwas_backend

    - name: make the backend executable
      file:
        path: /home/ec2-user/webgwas_backend
        mode: '0755'

    - name: copy settings file
      copy:
        src: webgwas-backend/settings.toml
        dest: /home/ec2-user/settings.toml

    - name: Copy backend systemd service file
      copy:
        src: backend.service
        dest: /etc/systemd/system/backend.service

    - name: Restart the backend systemd service
      systemd:
        name: backend
        state: restarted

    - name: Systemd reload
      systemd:
        daemon_reload: yes

  handlers:
    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded
