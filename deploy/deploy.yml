---
- name: Compile backend locally
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    repo_url: https://github.com/zietzm/webgwas-backend.git
    repo_dest: webgwas-backend
    binary_dest: webgwas_backend
  tasks:
    - name: Clone or update the webgwas-backend repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        depth: 1
      register: git_repo

    - name: Check if the binary exists
      stat:
        path: "{{ binary_dest }}"
      register: binary_stat

    - name: Compile the backend if there are changes or binary is missing
      shell: |
        cargo zigbuild --release --bin webgwas-backend --target x86_64-unknown-linux-gnu
        mv target/x86_64-unknown-linux-gnu/release/webgwas-backend ../{{ binary_dest }}
      args:
        chdir: "{{ repo_dest }}"
      when: git_repo.before != git_repo.after or not binary_stat.stat.exists


- name: Build frontend locally
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    repo_url: https://github.com/zietzm/webgwas-frontend.git
    repo_dest: webgwas-frontend
  tasks:
    - name: Clone or update the frontend repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        version: main
        update: yes
        force: yes
        accept_hostkey: yes

    - name: Install frontend dependencies
      args:
        chdir: "{{ repo_dest }}"
      shell: |
        bun install --frozen-lockfile

    - name: Build the frontend
      args:
        chdir: "{{ repo_dest }}"
      shell: |
        bun run next build
      environment:
        NEXT_PUBLIC_API_URL: "https://webgwas.org/api"


- name: Deploy WebGWAS
  hosts: hetzner
  become: yes
  vars:
    app_name: webgwas
    app_user: "{{ app_name }}"
    domain_name: webgwas.org
    nginx_basic_source: "nginx-basic.conf.j2"
    nginx_source: "nginx.conf.j2"
    nginx_dest: "/etc/nginx/conf.d/webgwas.conf"
    frontend_source: webgwas-frontend/out
    app_path: "/opt/{{ app_name }}"
    frontend_dest: "{{ app_path }}/frontend"
    backend_dest: "{{ app_path }}/webgwas"
    data_dest: "{{ app_path }}/data"
    results_dest: "{{ app_path }}/results"
    email: michael.zietz@gmail.com
  tasks:
    - name: Update and upgrade packages
      apt:
        update_cache: yes
        name: '*'
        state: latest

    - name: Install required packages
      apt:
        name:
          - nginx
          - sqlite3
          - curl
          - tmux
          - htop
          - cronie
          - zip
          - unzip
        state: present

    - name: Install AWS CLI
      args:
        executable: /bin/bash
        chdir: /tmp
        creates: /usr/local/bin/aws
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        create_home: no
        shell: /usr/sbin/nologin

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      with_items:
        - "{{ app_path }}"
        - "{{ frontend_dest }}"
        - "{{ data_dest }}"

    - name: Copy frontend static files
      synchronize:
        src: "{{ frontend_source }}/"
        dest: "{{ frontend_dest }}"
        rsync_opts:
          - "--delete"
          - "--compress"
          - "--recursive"

    - name: Sync data from S3 to EC2
      shell: |
        aws s3 sync s3://webgwas/webgwas/ {{ data_dest }} --delete

    - name: Copy backend binary
      copy:
        src: webgwas_backend
        dest: "{{ backend_dest }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Make the backend executable
      file:
        path: "{{ backend_dest }}"
        mode: '0755'

    - name: Copy settings file
      copy:
        src: webgwas-backend/settings-deploy.toml
        dest: "{{ app_path }}/settings.toml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Ensure the directory gives proper permissions for the app user
      file:
        path: "{{ app_path }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes

    - name: Copy backend systemd service file
      template:
        src: webgwas.service
        dest: /etc/systemd/system/webgwas.service
        mode: '0644'
      notify: Reload systemd

    - name: Enable and restart backend service
      systemd:
        name: webgwas
        state: restarted
        enabled: yes

    - name: Install UV
      shell: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
      args:
        creates:
          - /root/.cargo/bin/uv
          - /root/.cargo/bin/uvx
      register: uv_install

    - name: Ensure default Nginx config is removed
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify: Reload Nginx

    - name: Create directory for certbot challenges
      file:
        path: /var/www/certbot
        state: directory
        mode: '0755'

    - name: Copy basic Nginx config file
      template:
        src: "{{ nginx_basic_source }}"
        dest: "{{ nginx_dest }}"
        mode: '0644'
      notify: Reload Nginx

    - name: Obtain and install SSL certificate
      shell:
        /root/.cargo/bin/uvx --with certbot-nginx certbot --nginx -d {{ domain_name }} -d www.{{ domain_name }} --non-interactive --agree-tos --email {{ email }} --redirect
      args:
        executable: /bin/bash
        creates: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem

    - name: Ensure Certbot renew timer is enabled
      cron:
        name: "Certbot Renew"
        minute: "0"
        hour: "0,12"
        job: '/root/.cargo/bin/uv run python -c "import random; import time; time.sleep(random.random() * 3600)" && /root/.cargo/bin/uvx --with certbot-nginx certbot renew -q'

    - name: Copy full Nginx config file
      template:
        src: "{{ nginx_source }}"
        dest: "{{ nginx_dest }}"
        mode: '0644'
      notify: Reload Nginx

  handlers:
    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes
